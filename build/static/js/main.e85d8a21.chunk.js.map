{"version":3,"sources":["assests/icons.js","components/Editor/Editor.js","components/Backdrop/Backdrop.js","components/Popup/Popup.js","hoc/Aux.js","App.js","constants.js","serviceWorker.js","index.js"],"names":["library","add","faTimes","faTimesCircle","faCircleNotch","faCheckCircle","Snippet","props","useState","content","changeContent","languages","cpp","Prism","python","useEffect","document","getElementById","innerHTML","highlight","language","onChange","code","useRef","className","onClick","current","focus","ref","spellcheck","value","e","target","onKeyDown","event","selStartPos","currentTarget","selectionStart","key","preventDefault","substring","length","selectionEnd","id","Backdrop","close","children","Input","input","stopPropagation","heading","type","placeholder","output","for","onSubmit","icon","Aux","App","storeInput","data","sendCode","state","isInput","popup","setState","show","running","changeLang","evt","submitForm","fetch","method","headers","body","JSON","stringify","then","res","json","result","console","log","catch","err","this","name","checked","Editor","disabled","spin","Popup","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.e85d8a21.chunk.js","sourcesContent":["import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTimes, faTimesCircle, faCircleNotch, faCheckCircle} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTimes, faTimesCircle, faCircleNotch, faCheckCircle);","import React, {useState, useEffect, useRef} from 'react';\nimport './editor.css';\nimport Prism from 'prismjs';\nimport 'prismjs/components/prism-python.min';\nimport 'prismjs/components/prism-c.min';\nimport 'prismjs/components/prism-cpp.min';\nimport 'prismjs/themes/prism.css';\n\nconst Snippet = (props) => {\n\tconst [content, changeContent] = useState(props.content||'');\n\tconst languages = {\n\t\tcpp:Prism.languages.cpp,\n\t\tpython:Prism.languages.python\n\t}\n\tuseEffect(()=>{\n\t\tdocument.getElementById('codeoutput').innerHTML = Prism.highlight(content, languages[props.language], props.language);\n\t\tprops.onChange(content);\n\t}, [props.language, content]);\n\tconst code = useRef(null);\n\tconst checkTab = (event) => {\n\t\tlet value = content,\n\t      selStartPos = event.currentTarget.selectionStart;\n\t    if (event.key === \"Tab\") {\n\t    \tevent.preventDefault();\n\t      value =\n\t        value.substring(0, selStartPos) +\n\t       \"   \"+\n\t      value.substring(selStartPos, value.length);\n\t      event.currentTarget.selectionStart = selStartPos + 3;\n\t      event.currentTarget.selectionEnd = selStartPos + 4;\n\t      changeContent(value);\n\t    }\n\t};\n\t\n\treturn (\n\t\t<div className='EditorArea' onClick={()=>code.current.focus()}>\n\t\t\t<div className='Editor'>\n\t\t\t\t<textarea ref={code}  className='CodeInput' spellcheck='false' value={content} onChange={e=>changeContent(e.target.value)} onKeyDown={checkTab}   />\n\t\t\t\t<pre  className='CodeOutput' id='codeoutput'>\n\t\t\t\t\t\n\t\t\t\t</pre>\n\t\t\t</div>\n\t\t</div>\n\t\t);\n};\n\nexport default Snippet;\n\n\n/*\n<code  ref={code} className={`Code language-${props.language}`} id='code'>{content}</code>\nonKeyDown={(event)=>{\n\n\t\t\t\t\tif(event.keyCode===9){event.preventDefault(); var v=event.target.value,s=event.target.selectionStart,e=event.target.selectionEnd;event.target.value=v.substring(0, s)+'\\t'+v.substring(e);event.target.selectionStart=event.target.selectionEnd=s+1;return false;}\n\t\t\t\t}}\n\n*/","import React from 'react';\nimport './backdrop.css';\n\nconst Backdrop = (props) => {\n\treturn (\n\t\t<div className={'Backdrop'} onClick={props.close}>\n\t\t\t{props.children}\n\t\t</div>\n\t\t);\n};\n\nexport default Backdrop;\n","import React, {useRef} from 'react';\nimport './popup.css';\nimport Backdrop from '../Backdrop/Backdrop';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst Input = (props) => {\n\tconst input = useRef(null);\n\n\treturn (\n\t\t\t<Backdrop close={props.close}>\n\t\t\t\t<div className='Input' onClick={(e)=>{\n\t\t\t\t\t\t\t\te.stopPropagation();\n\t\t\t\t\t\t}} >\n\t\t\t\t\t<h3>{props.heading}</h3>\n\t\t\t\t\t{\n\t\t\t\t\t\tprops.type==='input'?<textarea ref={input} placeholder='Enter inputs seperated by whitespaces...'  />:null\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\tprops.type==='output'?<div className='Output'><pre>{props.output}</pre></div>:null\n\t\t\t\t\t}\n\t\t\t\t\t{\n\t\t\t\t\t\tprops.type==='input'?<button type='button' for='done' onClick={()=>{\n\t\t\t\t\t\t\tprops.onSubmit(input.current.value);\n\t\t\t\t\t\t\tprops.close();\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}><FontAwesomeIcon icon='check-circle' />Done</button>:null\n\t\t\t\t\t}\n\t\t\t\t\t<button type='button' for='close' onClick={props.close}><FontAwesomeIcon icon='times-circle' />Close</button>\n\t\t\t\t</div>\n\t\t\t</Backdrop>\n\t\t);\n};\n\nexport default Input;\n\n/*\n{\n\ttype:input||output,\n\theading:'Input||Ouput'\n\tclose:fun,\n\toutput:'output data'\n}\n*/","import React from 'react';\n\nconst Aux = (props) => props.children;\n\nexport default Aux;","import React, { Component } from 'react';\nimport './App.css';\nimport './assests/icons';\nimport Editor from './components/Editor/Editor';\nimport Popup from './components/Popup/Popup';\nimport Aux from './hoc/Aux';\nimport { URL } from './constants';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass App extends Component{\n  storeInput = (data) => {\n    this.sendCode(data);\n  };\n  state = {\n    language:'cpp',\n    content:'',\n    isInput:false,\n    popup:{\n      onSubmit: this.storeInput,\n      close:()=>{\n        this.setState({popup:{...this.state.popup, show:false}})\n      }\n    },\n    running:false,\n  };\n  changeContent = (content) => {\n    this.setState({content:content});\n  };\n  changeLang = (evt) => {\n    this.setState({language:evt.target.value});\n  };\n  submitForm = (e) => {\n    e.preventDefault();\n    if(this.state.isInput){\n      this.setState({popup:{...this.state.popup, show:true, type:'input', heading:'Input'}})\n    } else {\n      this.sendCode();\n    }\n  };\n  sendCode = (input) => {\n      this.setState({running:true});\n      fetch(URL+`/compile/${this.state.language}`, {\n        method:'POST',\n        headers:{'Content-Type':'application/json'},\n        body:JSON.stringify({\n          code:this.state.content,\n          input:input\n        })\n      }).then(res=>res.json()).then(result=>{\n        console.log(result.result)\n            this.setState({running:false, popup:{...this.state.popup, show:true, heading:'Output', type:'output', output:result.result}});\n      }).catch(err=>{\n        console.log(err)\n        this.setState({running:false, popup:{...this.state.popup, show:true, heading:'Error', output:'Opps! There is some error, try again!', type:'output'}});\n      });\n  };\n  render(){\n    return (\n    <form className=\"App\" onSubmit={this.submitForm}>\n      <h1 className='Heading'>Code Editor</h1>\n      <div className='Header' >\n        <select name='language' className='Language' onChange={this.changeLang}>\n          <option value='cpp'>C++</option>\n           <option value='python'>Python</option>\n        </select>\n        <div className='Checkbox'>\n          <input type='checkbox' name='input' value='true' onChange={(evt)=>{\n              this.setState({isInput:evt.target.checked});\n          }} />Input\n        </div>\n      </div>\n      <Editor language={this.state.language} content={this.state.content} onChange={this.changeContent} />\n      <div className='Controls'>\n        <button className='runBtn' disabled={this.state.running || this.state.content.length<=0} >\n          {\n            this.state.running?<Aux>\n              <FontAwesomeIcon icon='circle-notch' spin className='spin' />Runnig...\n            </Aux>:'Run'\n          }\n        </button>\n      </div>\n      {\n        this.state.popup&&this.state.popup.show?<Popup {...this.state.popup} />:null\n      }\n      \n    </form>\n  );\n  }\n}\nexport default App;\n","export const URL = 'https://editorserver.herokuapp.com';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}